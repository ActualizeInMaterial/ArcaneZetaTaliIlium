BEWARE and desired ways to code (my way):

------------------------------------------------------
1. in junit don't use this construct:
try {
	parent.appendChild( null );
	fail();
} catch ( final AssertionError e ) {
}

because fail() will throw AssertionError, so if you were expecting to catch appendChild's AssertionError, you can't be sure it
wasn't fail() who threw it;

so then, use `throw null` instead; unless you're trying to catch NullPointerException, then it's no good again;

use Q.fail() it will throw a subclass of Error

so use this:
	try {
		parent.appendChild( null );
		Q.fail();//this throws a child of Error, so don't catch Error :P if you do, use `throw null` here instead;
	} catch ( final AssertionError e ) {
	}


------------------------------------------------------
2. // XXX: maybe reuse? instead of new-ing all the time 
!!- no reusing! to catch bugs is better new-ing; with reuse we may
 even induce new bugs! for now, it's good that we catch usage of == instead of .equals()
 
------------------------------------------------------
3. when not yet implemented stuff ie. methods, use:
	throw Q.ni();
or just:
	Q.ni(); if you don't require a return value ie. if method is void
	
------------------------------------------------------
4. although this is likely faster:
	assert Q.nn( param_dataClass );
	field_dataClass = param_dataClass;
do this instead:
	field_dataClass = param_dataClass;
	assert Q.nn( field_dataClass );
	
simply because you may forget to assign the field and since the field isn't checked for null, fail will be later or possibly never

------------------------------------------------------
5. must override each .clone() when extending/implementing from NodeGeneric interface
in each subclass and cast it to the current class on return
------------------------------------------------------
6. make each junit class extend:
	extends JUnitHooker
	even the suite ones, especially those
why? we need to put a hook on when junit finished all tests, such that we disallow exit when something from swing is still 
showing ie. a JFrame
------------------------------------------------------
7. throw Q.cantClone();
inside clone() methods that are not yet implemented, rather than raw throw new
because throw Q.cantClone(); will add the exception in ToE
------------------------------------------------------
8. avoid `throw new X` instead try to make sure the exception are added to ToE first, either by manually adding them or 
better yet, use Q.* methods

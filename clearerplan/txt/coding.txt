Coding Style as used by/written by AtKaaZ at users.sourceforge.net
LastUpdate: 17 March 2005.

tab is 8 spaces

// names:
//      words within the identifier name are capitalized, see below.

//    CapitalTypes - types begin with a capital letter
typedef int MyInt_t;

//    CapitalizedWords() - function names
void
DodgeThis()
{
};

//    identifierName - local variables, temp stuff, lowecased first letter
int localVarName;
long tempVector;

//    ALL_UPPERCASE - defines
#define LAME_CONSTANT 154

// - accesor functions use 'Set'/'Get'/'Is'...
void
TBase::SetSomething();

void
TBase::GetSomething();

void
MMix::IsSomething();

//      instance of a class - begins with capital
TMyBaseClass MyPersonalInstance;
MMixedClass *TheDomain;

// sufixes:

//    '_t' - typedef(not typedef enums, see 'E' below), types
typedef int MyInt_t;

//    '_st' - struct type
struct What_st {
        int FieldOne;
        long SecondVar;
};


// prefixes:

//    'T' - base class

//    'M' - derived class

//    'E' - enum
enum EVariableName {
        kConstOne,
        kConstTwo
};

void
Test(enum EVariableName a_TestVar);

typedef enum {
        kOne=1,
        KTen=10
} EOneTen_t; //not OneTen_t

void
Test2(EOneTen_t a_Test2Var);

//    'f' - class member (field) variable
int gMyGlobalInt;

class MMyClass : public TBaseClass {
        int fIntVar;
        static int fgAnotherVar;
        void OneFunx();
};

//    'fg' - static 'f'
static int fgShit;

//    'g' - static global variable
int gShit;

//    'a' - function arguments
void OneFunc(
        int a_Dull,
        enum ENice a_Lame,
        Dood_st a_PassThru);

//    'k' - constants, including enum items(perhaps I'm gonna regret this)
const int kDumbStorage;
enum ESmartie {
        kZero,
        kOne
};



// braces:
int Function(int x)
{
        do {
                body of do-loop
        } while (condition);


        if (x == y) {
                ..
        } else if (x > y) {
                ...
        } else {
                ....
        }
}

Rationale: K&R.

inspired from other sources, notably:
* /usr/src/linux/Documentation/CodingStyle
* Taligent Rules

